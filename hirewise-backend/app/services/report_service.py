from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime
import os
from app.config import settings

class ReportGenerator:
    
    def generate_ats_report(self, result: dict, user_name: str = "User") -> str:
        """Generate ATS analysis report as DOCX"""
        doc = Document()
        
        # Title
        title = doc.add_heading('ATS Compatibility Report', 0)
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Metadata
        meta = doc.add_paragraph()
        meta.add_run(f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}\n").italic = True
        meta.add_run(f"Candidate: {user_name}\n").italic = True
        meta.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph("_" * 60)
        
        # Overall Score
        doc.add_heading('Overall ATS Score', 1)
        score_para = doc.add_paragraph()
        score_run = score_para.add_run(f"{result['overall_score']}%")
        score_run.font.size = Pt(36)
        score_run.font.bold = True
        score_run.font.color.rgb = RGBColor(0, 172, 193) if result['overall_score'] >= 75 else RGBColor(245, 158, 11)
        score_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Interpretation
        if result['overall_score'] >= 80:
            interpretation = "Excellent! Your resume is highly ATS-compatible."
        elif result['overall_score'] >= 60:
            interpretation = "Good! Your resume has room for improvement."
        else:
            interpretation = "Needs work. Focus on the suggestions below."
        doc.add_paragraph(interpretation).alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph("_" * 60)
        
        # Detailed Metrics
        doc.add_heading('Detailed Metrics', 1)
        
        metrics = [
            ('Formatting', result['formatting_score']),
            ('Keywords', result['keywords_score']),
            ('Structure', result['structure_score']),
            ('Readability', result['readability_score'])
        ]
        
        for metric_name, metric_score in metrics:
            p = doc.add_paragraph()
            p.add_run(f"{metric_name}: ").bold = True
            p.add_run(f"{metric_score}% ")
            p.add_run("█" * int(metric_score / 5))  # Visual bar
        
        doc.add_paragraph("_" * 60)
        
        # Improvement Suggestions
        doc.add_heading('Improvement Suggestions', 1)
        for i, suggestion in enumerate(result['suggestions'], 1):
            doc.add_paragraph(f"{i}. {suggestion}", style='List Number')
        
        # Found Keywords
        if result.get('found_keywords'):
            doc.add_heading('Action Verbs Found', 2)
            doc.add_paragraph(', '.join(result['found_keywords']))
        
        # Sections Found
        if result.get('sections_found'):
            doc.add_heading('Resume Sections Detected', 2)
            doc.add_paragraph(', '.join(result['sections_found']).title())
        
        # Footer
        doc.add_paragraph("_" * 60)
        footer = doc.add_paragraph()
        footer.add_run("Generated by HireWise - AI-Powered Interview Platform").italic = True
        footer.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Save report
        filename = f"ats_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        filepath = os.path.join(settings.reports_dir, filename)
        doc.save(filepath)
        
        return filepath
    
    def generate_jd_match_report(
        self, result: dict, job_title: str = "Position", user_name: str = "User"
    ) -> str:
        """Generate JD Match report as DOCX"""
        doc = Document()
        
        # Title
        title = doc.add_heading('Job Description Match Report', 0)
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Metadata
        meta = doc.add_paragraph()
        meta.add_run(f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}\n").italic = True
        meta.add_run(f"Candidate: {user_name}\n").italic = True
        meta.add_run(f"Position: {job_title}\n").italic = True
        meta.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph("_" * 60)
        
        # Overall Match Score
        doc.add_heading('Overall Match Score', 1)
        score_para = doc.add_paragraph()
        score_run = score_para.add_run(f"{result['match_score']}%")
        score_run.font.size = Pt(36)
        score_run.font.bold = True
        score_run.font.color.rgb = RGBColor(0, 172, 193) if result['match_score'] >= 70 else RGBColor(245, 158, 11)
        score_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Interpretation
        if result['match_score'] >= 80:
            interpretation = "Excellent match! You're highly qualified for this position."
        elif result['match_score'] >= 60:
            interpretation = "Good match! Address the gaps below to improve your chances."
        else:
            interpretation = "Moderate match. Consider tailoring your resume to this role."
        doc.add_paragraph(interpretation).alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph("_" * 60)
        
        # Detailed Analysis
        doc.add_heading('Detailed Analysis', 1)
        
        analysis = [
            ('Technical Skills', result['technical_skills']),
            ('Experience Level', result['experience_score']),
            ('Education', result['education_score']),
            ('Keywords Match', result['keywords_score'])
        ]
        
        for metric_name, metric_score in analysis:
            p = doc.add_paragraph()
            p.add_run(f"{metric_name}: ").bold = True
            p.add_run(f"{metric_score}% ")
            p.add_run("█" * int(metric_score / 5))
        
        doc.add_paragraph("_" * 60)
        
        # Matched Skills
        if result.get('matched_skills'):
            doc.add_heading('Matched Skills', 1)
            matched_text = ', '.join(result['matched_skills'])
            p = doc.add_paragraph(matched_text)
            p.runs[0].font.color.rgb = RGBColor(16, 185, 129)  # Green
        
        # Missing Skills (Gaps)
        if result.get('missing_skills'):
            doc.add_heading('Skills to Develop', 1)
            for skill in result['missing_skills']:
                doc.add_paragraph(f"• {skill}", style='List Bullet')
        
        doc.add_paragraph("_" * 60)
        
        # Recommendations
        doc.add_heading('Recommendations', 1)
        for i, recommendation in enumerate(result['recommendations'], 1):
            doc.add_paragraph(f"{i}. {recommendation}", style='List Number')
        
        # Footer
        doc.add_paragraph("_" * 60)
        footer = doc.add_paragraph()
        footer.add_run("Generated by HireWise - AI-Powered Interview Platform").italic = True
        footer.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Save report
        filename = f"jd_match_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        filepath = os.path.join(settings.reports_dir, filename)
        doc.save(filepath)
        
        return filepath
